name: CI

on:
  pull_request:
    branches:
      - main
      - develop

# Secrets
# Please obtain from azure and set following credentials if you want to deploy to AKS cluster
## AZURE_CREDENTIALS: Azure service principal json credential
## DOCKER_USERNAME: Username of container registry for push image
## DOCKER_PASSWORD: Password of container registry for push image

env:
  ## Application settings / configures
  # Your base domain (e.g. eng-stage.botchan.chat)
  BASE_DOMAIN: <YOUR_DOMAIN>
  # Your application name (e.g. affiliate-server-backend)
  BASE_APP_NAME: <YOUR_APPLICATION_NAME>
  ## For deploy settings
  URL_SCHEME: https
  APP_PREFIX: pr${{ github.event.number }}

  ## Helm settings / configures
  CHART_PATH: manifests/charts
  # Please set helm release name
  RELEASE_NAME: <YOUR_RELEASE_NAME>

  ## Azure settings / configures
  # Your Azure Container Registry instance name (e.g. botchaneng)
  AZURE_CONTAINER_REGISTRY: <YOUR_CONTAINER_REGISTRY>
  # Your AKS ResourceGroup (e.g. botchan-engagement)
  RESOURCE_GROUP: <YOUR_RESOURCE_GROUP>
  # Your AKS ClusterName (e.g. botchan-engagement-stage)
  CLUSTER_NAME: <YOUR_CLUSTER_NAME>
  # Please set project name as IMAGE NAME
  IMAGE_NAME: <YOUR_IMAGE_NAME>

jobs:
  check-pr:
    name: Check PR
    runs-on: ubuntu-latest
    steps:
      - name: Assigne PR issuer if needed
        if: ${{ toJSON(github.event.pull_request.assignees) == '[]' }}
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          ASSIGNEE: ${{ github.event.pull_request.user.login }}
        run: gh pr edit $PR_NUMBER --add-assignee $ASSIGNEE

      - name: Check PR is labeled
        id: check_labeled
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          ASSIGNEE: ${{ github.event.pull_request.user.login }}
        run: |
          LABELS_COUNT=$(gh pr view $PR_NUMBER --json labels --jq '.labels | length')
          if [ $LABELS_COUNT -eq 0 ]; then
            exit 1
          else
            exit 0
          fi

      - name: Notify PR check error
        if: failure() && steps.check_labeled.outcome == 'failure'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            @${{ github.event.pull_request.user.login }}
            Please labeling your issued PR !
            And then, you should re-run pipeline by [this link](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})

  setup:
    runs-on: ubuntu-latest
    needs:
      - check-pr
    steps:
      - run: echo Begin CI pipeline

  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.14]

    needs:
      - setup

    steps:
      - name: Setup ReviewDog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node_modules
        uses: actions/cache@v2
        id: check_cache
        with:
          path: '**/node_modules'
          key: ${{ matrix.node-version }}-${{ hashFiles('yarn.lock') }}-${{ secrets.CACHE_VERSION }}

      - name: Install modules
        if: steps.check_cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: lint review
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: 'src/'

      - name: Typecheck
        run: tsc --pretty false --noEmit | reviewdog -f=tsc -reporter=github-pr-review -fail-on-error=true
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: format check
        run: yarn format:check | reviewdog -f=tsc -reporter=github-pr-review -fail-on-error=true
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: test
        run: yarn test

  #preview-build:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - setup
  #  env:
  #
  #  steps:
  #    - uses: actions/checkout@master

  #    - name: Azure Login
  #      uses: azure/login@v1
  #      with:
  #        creds: ${{ secrets.AZURE_CREDENTIALS }}

  #    - uses: azure/docker-login@v1
  #      with:
  #        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
  #        username: ${{ secrets.DOCKER_USERNAME }}
  #        password: ${{ secrets.DOCKER_PASSWORD }}

  #    - name: Setup docker buildx
  #      uses: docker/setup-buildx-action@v1
  #      id: buildx

  #    - name: Cache or restore docker build layers
  #      uses: actions/cache@v2
  #      with:
  #        path: /tmp/.buildx-cache
  #        key: ${{ github.ref }}-${{ github.sha }}
  #        restore-keys: |
  #          ${{ github.ref }}-${{ github.sha }}
  #          ${{ github.ref }}
  #          refs/head/main

  #    - uses: docker/build-push-action@v2
  #      with:
  #        push: true
  #        context: .
  #        tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
  #        file: manifests/Dockerfile
  #        builder: ${{ steps.buildx.outputs.name }}
  #        cache-from: type=local,src=/tmp/.buildx-cache
  #        cache-to: type=local,dest=/tmp/.buildx-cache

  #preview-deploy:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - pr-build
  #  steps:
  #    - uses: actions/checkout@master

  #    - name: Azure Login
  #      uses: azure/login@v1
  #      with:
  #        creds: ${{ secrets.AZURE_CREDENTIALS }}

  #    - name: Gets K8s context
  #      uses: azure/aks-set-context@v1
  #      with:
  #        creds: ${{ secrets.AZURE_CREDENTIALS }}
  #        resource-group: ${{ env.RESOURCE_GROUP }}
  #        cluster-name: ${{ env.CLUSTER_NAME }}
  #      id: login

  #    - name: Configure deployment
  #      uses: azure/k8s-bake@v1
  #      with:
  #        renderEngine: 'helm'
  #        helmChart: ${{ env.CHART_PATH }}
  #        releaseName: ${{ env.RELEASE_NAME }}
  #        helm-version: 'latest'
  #        overrides: |-
  #          domain:${{ env.APP_PREFIX }}.${{ env.BASE_DOMAIN }}
  #          fullnameOverride:${{ env.APP_PREFIX }}-${{ env.BASE_APP_NAME }}
  #          prNumber:${{ env.APP_PREFIX }}
  #      id: bake

  #    - name: Deploys application
  #      uses: Azure/k8s-deploy@v1
  #      with:
  #        manifests: ${{ steps.bake.outputs.manifestsBundle }}
  #        images: |
  #          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
  #        imagepullsecrets: |
  #          ${{ env.IMAGE_NAME }}

  #nofity-ci-results:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - preview-deploy
  #  steps:
  #    - name: Find already posted comment
  #      uses: peter-evans/find-comment@v1
  #      id: find_comment
  #      with:
  #        issue-number: ${{ github.event.pull_request.number }}
  #        comment-author: "github-actions[bot]"
  #        body-includes: This pr is being automatically deployed!

  #    - name: Set current datetime as env variable
  #      env:
  #        TZ: "Asia/Tokyo"
  #      run: echo "CURRENT_DATETIME=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

  #    - name: Notify pr deploy results
  #      uses: peter-evans/create-or-update-comment@v1
  #      with:
  #        comment-id: ${{ steps.find_comment.outputs.comment-id }}
  #        issue-number: ${{ github.event.pull_request.number }}
  #        body: |
  #          This pr is being automatically deployed!
  #          Please check applications of your commit, click following url.

  #          Application: ${{ env.URL_SCHEME }}://${{ env.APP_PREFIX }}.${{ env.BASE_FRONTEND_DOMAIN }}

  #          Last deployed at: ${{ env.CURRENT_DATETIME }}
  #          Last deployed commit hash: ${{ github.sha }}
  #        edit-mode: replace
